#!/bin/bash

# SOL VM Queue API Deployment Script
# This script helps deploy the message queue API to various platforms

set -e

echo "🚀 SOL VM Queue API Deployment Helper"
echo "===================================="

# Function to generate API key
generate_api_key() {
    if command -v openssl &> /dev/null; then
        openssl rand -base64 32
    else
        python3 -c "import secrets; print(secrets.token_urlsafe(32))"
    fi
}

# Function to deploy to Heroku
deploy_heroku() {
    echo "📦 Deploying to Heroku..."
    
    # Check if heroku CLI is installed
    if ! command -v heroku &> /dev/null; then
        echo "❌ Heroku CLI is not installed. Please install it first:"
        echo "   curl https://cli-assets.heroku.com/install.sh | sh"
        exit 1
    fi
    
    # Get app name
    read -p "Enter Heroku app name (e.g., my-solvm-queue): " app_name
    
    if [ -z "$app_name" ]; then
        echo "❌ App name is required"
        exit 1
    fi
    
    # Generate API key
    api_key=$(generate_api_key)
    echo "🔑 Generated API key: $api_key"
    
    # Create Procfile
    echo "web: python message_queue_api.py" > Procfile
    
    # Initialize git if needed
    if [ ! -d ".git" ]; then
        git init
        git add .
        git commit -m "Initial commit for SOL VM queue API"
    fi
    
    # Create Heroku app
    echo "🏗️ Creating Heroku app: $app_name"
    heroku create "$app_name"
    
    # Set environment variables
    echo "⚙️ Setting environment variables..."
    heroku config:set API_KEY="$api_key" -a "$app_name"
    heroku config:set MAX_TASK_AGE_HOURS=24 -a "$app_name"
    heroku config:set CLEANUP_INTERVAL_MINUTES=60 -a "$app_name"
    
    # Deploy
    echo "🚀 Deploying to Heroku..."
    git add Procfile
    git commit -m "Add Procfile for Heroku"
    git push heroku main
    
    # Get URLs
    app_url="https://$app_name.herokuapp.com"
    
    echo ""
    echo "🎉 Deployment successful!"
    echo "📋 Configuration Details:"
    echo "   App URL: $app_url"
    echo "   Task Queue URL: $app_url/tasks"
    echo "   Result Queue URL: $app_url/results"
    echo "   API Key: $api_key"
    echo ""
    echo "💾 Save these URLs and API key for your .env.local file!"
    
    # Test deployment
    echo "🧪 Testing deployment..."
    if curl -s "$app_url/health" > /dev/null; then
        echo "✅ API is responding correctly"
    else
        echo "⚠️ API might still be starting up. Try again in a minute."
    fi
    
    # Create .env.local template
    cat > .env.local.template << EOF
# SOL VM Configuration - Generated by deployment script
REACT_APP_EXECUTOR_TYPE=auto
REACT_APP_TASK_QUEUE_URL=$app_url/tasks
REACT_APP_RESULT_QUEUE_URL=$app_url/results
REACT_APP_API_KEY=$api_key

# Optional settings
REACT_APP_MAX_RETRIES=3
REACT_APP_RETRY_DELAY=2000
REACT_APP_POLL_INTERVAL=3000
EOF
    
    echo "📝 Created .env.local.template - copy this to .env.local"
}

# Function to deploy to Railway
deploy_railway() {
    echo "🚂 Deploying to Railway..."
    
    if ! command -v railway &> /dev/null; then
        echo "❌ Railway CLI is not installed. Please install it first:"
        echo "   npm install -g @railway/cli"
        exit 1
    fi
    
    # Generate API key
    api_key=$(generate_api_key)
    echo "🔑 Generated API key: $api_key"
    
    # Login and deploy
    echo "Please login to Railway when prompted..."
    railway login
    
    # Create new project
    railway new
    
    # Set environment variables
    echo "⚙️ Setting environment variables..."
    railway variables:set API_KEY="$api_key"
    railway variables:set MAX_TASK_AGE_HOURS=24
    railway variables:set CLEANUP_INTERVAL_MINUTES=60
    
    # Deploy
    echo "🚀 Deploying to Railway..."
    railway up
    
    echo ""
    echo "🎉 Deployment to Railway initiated!"
    echo "📋 Configuration Details:"
    echo "   API Key: $api_key"
    echo ""
    echo "ℹ️ Get your app URL from Railway dashboard and update .env.local"
}

# Function to create deployment package
create_package() {
    echo "📦 Creating deployment package..."
    
    # Create deployment directory
    mkdir -p sol_vm_deployment
    
    # Copy files
    cp message_queue_api.py sol_vm_deployment/
    cp requirements.txt sol_vm_deployment/
    
    # Create Procfile for Heroku
    echo "web: python message_queue_api.py" > sol_vm_deployment/Procfile
    
    # Create runtime.txt for Python version
    echo "python-3.9.16" > sol_vm_deployment/runtime.txt
    
    # Create README
    cat > sol_vm_deployment/README.md << 'EOF'
# SOL VM Message Queue API

This is the message queue API for SOL VM communication.

## Quick Deploy to Heroku

1. Install Heroku CLI
2. Login: `heroku login`
3. Create app: `heroku create your-app-name`
4. Set config: `heroku config:set API_KEY=your-secret-key`
5. Deploy: `git push heroku main`

## Environment Variables

- `API_KEY`: Secret key for authentication
- `MAX_TASK_AGE_HOURS`: How long to keep old tasks (default: 24)
- `CLEANUP_INTERVAL_MINUTES`: Cleanup frequency (default: 60)
EOF
    
    echo "✅ Deployment package created in sol_vm_deployment/"
    echo "   You can now deploy this directory to any cloud platform"
}

# Function to test local setup
test_local() {
    echo "🧪 Testing local setup..."
    
    # Check if Python is available
    if ! command -v python3 &> /dev/null; then
        echo "❌ Python 3 is not installed"
        exit 1
    fi
    
    # Install dependencies
    echo "📦 Installing dependencies..."
    pip3 install -r requirements.txt
    
    # Generate test API key
    api_key=$(generate_api_key)
    
    # Start API in background
    echo "🚀 Starting API server..."
    export API_KEY="$api_key"
    export PORT=5000
    python3 message_queue_api.py &
    api_pid=$!
    
    # Wait for server to start
    sleep 3
    
    # Test API
    echo "🧪 Testing API endpoints..."
    
    if curl -s http://localhost:5000/health > /dev/null; then
        echo "✅ Health endpoint working"
    else
        echo "❌ Health endpoint failed"
    fi
    
    # Test authentication
    if curl -s -H "Authorization: Bearer $api_key" http://localhost:5000/status > /dev/null; then
        echo "✅ Authentication working"
    else
        echo "❌ Authentication failed"
    fi
    
    # Stop API
    kill $api_pid 2>/dev/null || true
    
    echo ""
    echo "🎉 Local test completed!"
    echo "API Key for testing: $api_key"
}

# Main menu
echo ""
echo "Choose deployment option:"
echo "1) Deploy to Heroku (recommended)"
echo "2) Deploy to Railway"
echo "3) Create deployment package (manual deployment)"
echo "4) Test locally"
echo "5) Exit"
echo ""

read -p "Enter your choice (1-5): " choice

case $choice in
    1)
        deploy_heroku
        ;;
    2)
        deploy_railway
        ;;
    3)
        create_package
        ;;
    4)
        test_local
        ;;
    5)
        echo "👋 Goodbye!"
        exit 0
        ;;
    *)
        echo "❌ Invalid choice. Please run the script again."
        exit 1
        ;;
esac

echo ""
echo "🔗 Next Steps:"
echo "1. Update your .env.local file with the API URLs and key"
echo "2. Deploy the SOL VM poller using deploy_sol_vm.sh"
echo "3. Test the complete integration"
echo ""
echo "📚 For detailed instructions, see QUEUE_DEPLOYMENT_GUIDE.md"
